name: CICD EKS Workflow

on:
  push:
    branches:
      - main

jobs:
  create_s3_bucket:
    name: Create S3 Bucket
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create S3 bucket
        run: |
          if aws s3api head-bucket --bucket "sock-bucket" >/dev/null 2>&1; then
            echo "Bucket already exists, skipping creation."
          else
            echo "Bucket does not exist, creating it."
            aws s3 mb s3://sock-bucket
          fi
        shell: bash
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  terraform_provision:
    name: Provision EKS Cluster
    runs-on: ubuntu-latest
    needs: create_s3_bucket
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Apply Terraform configuration
        working-directory: terraform
        run: terraform apply --auto-approve

  update_kubeconfig:
    name: Update kubeconfig for EKS Cluster
    runs-on: ubuntu-latest
    needs: terraform_provision
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name socks-shop-CICD001 --region us-east-1

      - name: Check current-context
        run: kubectl config current-context

  apply_configmap:
    name: Apply ConfigMap
    runs-on: ubuntu-latest
    needs: update_kubeconfig
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3

      - name: Apply aws-auth ConfigMap
        run: kubectl apply -f k8s/aws-auth.yaml

      - name: Update kubeconfig for changes
        run: aws eks update-kubeconfig --name socks-shop-CICD001 --region us-east-1

  create_namespace:
    name: Create Namespace
    runs-on: ubuntu-latest
    needs: apply_configmap
    steps:
      - name: Create sock-shop namespace
        run: kubectl create namespace sock-shop

  install_helm:
    name: Install Helm and Add Repositories
    runs-on: ubuntu-latest
    needs: create_namespace
    steps:
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Add Helm repositories
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx/
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts/
          helm repo update

  deploy_letsencrypt:
    name: Deploy Let's Encrypt
    runs-on: ubuntu-latest
    needs: install_helm
    steps:
      - name: Deploy Let's Encrypt
        run: |
          helm install cert-manager jetstack/cert-manager \
            --namespace sock-shop \
            --create-namespace \
            --version v1.15.2 \
            --set crds.enabled=true
          
          kubectl apply -f k8s/cluster-issuer.yml
          kubectl apply -f k8s/certificate.yaml

  deploy_sock_shop:
    name: Deploy Sock Shop Application
    runs-on: ubuntu-latest
    needs: deploy_letsencrypt
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3

      - name: Install Sock Shop application
        run: helm install capstoneapp helm/app --namespace sock-shop

      - name: Install Ingress NGINX
        run: helm install ingress-nginx ingress-nginx/ingress-nginx --namespace sock-shop

      - name: Install Prometheus
        run: helm install prometheus prometheus-community/kube-prometheus-stack --namespace sock-shop

      - name: Apply Ingress configuration
        run: kubectl create -f helm/ingress.yml
